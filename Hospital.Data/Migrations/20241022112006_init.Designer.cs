// <auto-generated />
using System;
using Hospital.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.Data.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20241022112006_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hospital.Data.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailbleNumberOfBeds")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("occupiedBeds")
                        .HasColumnType("int");

                    b.Property<int>("totalNumberOfBeds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Findings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicalFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalFileId");

                    b.ToTable("Examination");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.MedicalFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnterTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OutTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("initialDiagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalFile");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("chronicDiseases")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<long>("DoctorId1")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("MedicalFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportId");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("MedicalFileId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicalFileId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.TreatmentPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MedicalFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Medications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procedures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalFileId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("TreatmentPlan");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.VitalSigns", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BodyTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("CheckTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiastolicBloodPressure")
                        .HasColumnType("int");

                    b.Property<int>("HeartRate")
                        .HasColumnType("int");

                    b.Property<Guid>("MedicalFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OxygenSaturation")
                        .HasColumnType("int");

                    b.Property<int>("RespiratoryRate")
                        .HasColumnType("int");

                    b.Property<int>("SystolicBloodPressure")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalFileId");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.XRay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicalFileId");

                    b.ToTable("XRay");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<long?>("NurseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NurseId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("AnnualVacations")
                        .HasColumnType("int");

                    b.Property<int>("AvailableAnnualVacations")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VisaNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("departmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("departmentId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Nurse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("AnnualVacations")
                        .HasColumnType("int");

                    b.Property<int>("AvailableAnnualVacations")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VisaNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("departmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("departmentId");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Examination", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Workers.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.PatientsData.MedicalFile", null)
                        .WithMany("examinations")
                        .HasForeignKey("MedicalFileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.MedicalFile", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Workers.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.PatientsData.Patient", null)
                        .WithMany("MedicalFiles")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Patient", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.HospitalData.Department", null)
                        .WithMany("patients")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Report", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Workers.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.PatientsData.MedicalFile", null)
                        .WithMany("reports")
                        .HasForeignKey("MedicalFileId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Test", b =>
                {
                    b.HasOne("Hospital.Data.Entities.PatientsData.MedicalFile", "MedicalFile")
                        .WithMany("tests")
                        .HasForeignKey("MedicalFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalFile");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.TreatmentPlan", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Workers.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.PatientsData.MedicalFile", null)
                        .WithMany("treatmentPlans")
                        .HasForeignKey("MedicalFileId");

                    b.HasOne("Hospital.Data.Entities.PatientsData.Report", "Report")
                        .WithOne()
                        .HasForeignKey("Hospital.Data.Entities.PatientsData.TreatmentPlan", "ReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.VitalSigns", b =>
                {
                    b.HasOne("Hospital.Data.Entities.PatientsData.MedicalFile", "MedicalFile")
                        .WithMany("vitalSigns")
                        .HasForeignKey("MedicalFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalFile");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.XRay", b =>
                {
                    b.HasOne("Hospital.Data.Entities.PatientsData.MedicalFile", "MedicalFile")
                        .WithMany("XRays")
                        .HasForeignKey("MedicalFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalFile");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Appointment", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Workers.Doctor", null)
                        .WithMany("appointments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Hospital.Data.Entities.Workers.Nurse", null)
                        .WithMany("appointments")
                        .HasForeignKey("NurseId");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Doctor", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.HospitalData.Department", "department")
                        .WithMany("doctors")
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("department");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Nurse", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.HospitalData.Department", "department")
                        .WithMany("nurses")
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("department");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.Department", b =>
                {
                    b.Navigation("doctors");

                    b.Navigation("nurses");

                    b.Navigation("patients");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.MedicalFile", b =>
                {
                    b.Navigation("XRays");

                    b.Navigation("examinations");

                    b.Navigation("reports");

                    b.Navigation("tests");

                    b.Navigation("treatmentPlans");

                    b.Navigation("vitalSigns");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Patient", b =>
                {
                    b.Navigation("MedicalFiles");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Doctor", b =>
                {
                    b.Navigation("appointments");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Nurse", b =>
                {
                    b.Navigation("appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
