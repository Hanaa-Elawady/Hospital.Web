// <auto-generated />
using System;
using Hospital.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.Data.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20241105084237_EditDrugQuantity")]
    partial class EditDrugQuantity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hospital.Data.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailbleNumberOfBeds")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("occupiedBeds")
                        .HasColumnType("int");

                    b.Property<int>("totalNumberOfBeds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.Drug", b =>
                {
                    b.Property<int>("DrugID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrugTypeID")
                        .HasColumnType("int");

                    b.Property<decimal>("StorageTemperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TreatmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DrugID");

                    b.HasIndex("DrugTypeID");

                    b.HasIndex("TreatmentPlanId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.DrugType", b =>
                {
                    b.Property<int>("DrugTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugTypeID"));

                    b.Property<string>("DrugTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrugTypeID");

                    b.ToTable("DrugTypes");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryID"));

                    b.Property<int>("AvailableQuantityInStock")
                        .HasColumnType("int");

                    b.Property<int>("DrugID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.HasKey("InventoryID");

                    b.HasIndex("DrugID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<int>("DrugID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("DrugID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExaminationType")
                        .HasColumnType("int");

                    b.Property<string>("Findings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicalFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalFileId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.MedicalFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnterTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OutTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("initialDiagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalFiles");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("chronicDiseases")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.TreatmentPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MedicalFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Procedures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalFileId");

                    b.ToTable("TreatmentPlans");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.VitalSigns", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BodyTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("CheckTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiastolicBloodPressure")
                        .HasColumnType("int");

                    b.Property<int>("HeartRate")
                        .HasColumnType("int");

                    b.Property<Guid>("MedicalFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OxygenSaturation")
                        .HasColumnType("int");

                    b.Property<int>("RespiratoryRate")
                        .HasColumnType("int");

                    b.Property<int>("SystolicBloodPressure")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalFileId");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<long?>("NurseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NurseId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("AnnualVacations")
                        .HasColumnType("int");

                    b.Property<int>("AvailableAnnualVacations")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VisaNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("departmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("departmentId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Nurse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("AnnualVacations")
                        .HasColumnType("int");

                    b.Property<int>("AvailableAnnualVacations")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VisaNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("departmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("departmentId");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.Drug", b =>
                {
                    b.HasOne("Hospital.Data.Entities.HospitalData.DrugStorage.DrugType", "DrugType")
                        .WithMany("Drugs")
                        .HasForeignKey("DrugTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.PatientsData.TreatmentPlan", null)
                        .WithMany("Medications")
                        .HasForeignKey("TreatmentPlanId");

                    b.Navigation("DrugType");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.Inventory", b =>
                {
                    b.HasOne("Hospital.Data.Entities.HospitalData.DrugStorage.Drug", "Drug")
                        .WithMany("Inventories")
                        .HasForeignKey("DrugID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.Order", b =>
                {
                    b.HasOne("Hospital.Data.Entities.HospitalData.DrugStorage.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.OrderDetail", b =>
                {
                    b.HasOne("Hospital.Data.Entities.HospitalData.DrugStorage.Drug", "Drug")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DrugID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.HospitalData.DrugStorage.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Examination", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Workers.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.PatientsData.MedicalFile", null)
                        .WithMany("examinations")
                        .HasForeignKey("MedicalFileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.MedicalFile", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Workers.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.PatientsData.Patient", null)
                        .WithMany("MedicalFiles")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Patient", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.HospitalData.Department", null)
                        .WithMany("patients")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.TreatmentPlan", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Workers.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.PatientsData.MedicalFile", null)
                        .WithMany("treatmentPlans")
                        .HasForeignKey("MedicalFileId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.VitalSigns", b =>
                {
                    b.HasOne("Hospital.Data.Entities.PatientsData.MedicalFile", "MedicalFile")
                        .WithMany("vitalSigns")
                        .HasForeignKey("MedicalFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalFile");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Appointment", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Workers.Doctor", null)
                        .WithMany("appointments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Hospital.Data.Entities.Workers.Nurse", null)
                        .WithMany("appointments")
                        .HasForeignKey("NurseId");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Doctor", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.HospitalData.Department", "department")
                        .WithMany("doctors")
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("department");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Nurse", b =>
                {
                    b.HasOne("Hospital.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.Entities.HospitalData.Department", "department")
                        .WithMany("nurses")
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("department");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.Department", b =>
                {
                    b.Navigation("doctors");

                    b.Navigation("nurses");

                    b.Navigation("patients");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.Drug", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.DrugType", b =>
                {
                    b.Navigation("Drugs");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Hospital.Data.Entities.HospitalData.DrugStorage.Supplier", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.MedicalFile", b =>
                {
                    b.Navigation("examinations");

                    b.Navigation("treatmentPlans");

                    b.Navigation("vitalSigns");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.Patient", b =>
                {
                    b.Navigation("MedicalFiles");
                });

            modelBuilder.Entity("Hospital.Data.Entities.PatientsData.TreatmentPlan", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Doctor", b =>
                {
                    b.Navigation("appointments");
                });

            modelBuilder.Entity("Hospital.Data.Entities.Workers.Nurse", b =>
                {
                    b.Navigation("appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
